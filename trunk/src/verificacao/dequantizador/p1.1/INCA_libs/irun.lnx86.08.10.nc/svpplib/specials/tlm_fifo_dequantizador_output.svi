  
//------------------------------------------------------------------------------
// Copyright 2006-07, Cadence Design Systems, Inc.
//
// Generated by 'svpp' pre-processor. DO NOT EDIT.
//
// File     : tlm_fifo_dequantizador_output.svi
// Origin   : class 'tlm_fifo' in file /usr/local/cds/ovm-2.0/src/tlm/tlm_fifos.svh
//
// Specializations found at:
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_req_rsp.svh,line=47
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_fifos.svh,line=151
//  file=./tb.sv,line=14
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_req_rsp.svh,line=46
//  file=/usr/local/cds/ovm-2.0/src/compatibility/urm_meth_compatibility.svh,line=112
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_req_rsp.svh,line=76
//  file=/usr/local/cds/ovm-2.0/src/methodology/sequences/ovm_sequencer_analysis_fifo.svh,line=22
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_req_rsp.svh,line=72
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_req_rsp.svh,line=81
//  file=./tb.sv,line=12
//  file=/usr/local/cds/ovm-2.0/src/methodology/sequences/ovm_sequencer_param_base.svh,line=44
//  file=/usr/local/cds/ovm-2.0/src/tlm/tlm_req_rsp.svh,line=80
//------------------------------------------------------------------------------

`ifndef tlm_fifo_dequantizador_output
`define tlm_fifo_dequantizador_output

typedef class dequantizador_output;

class tlm_fifo_dequantizador_output extends tlm_fifo_base_dequantizador_output;

  const static string type_name = "tlm_fifo #(T)";

  //--------------------------------------------------------------------
  // local data
  //--------------------------------------------------------------------
  local mailbox  m;
  local int m_size;
  protected int m_pending_blocked_gets;

  //--------------------------------------------------------------------
  // constructor (new)
  //--------------------------------------------------------------------
  function new(string name, ovm_component parent = null, int size = 1);
    super.new(name, parent);

    m = new( size );
    m_size = size;
  endfunction

  virtual function string get_type_name();
    return type_name;
  endfunction

  function int size();
    return m_size;
  endfunction
 
  virtual function int used();
    return m.num();
  endfunction

  function bit is_empty();
    return (m.num() == 0);
  endfunction
 
  function bit is_full();
    return (m.num() == m_size);
  endfunction
 
  task put( input dequantizador_output t );
    m.put( t );
    put_ap.write( t );
  endtask

  task get( output dequantizador_output t );
    m_pending_blocked_gets++;
    m.get( t );
    m_pending_blocked_gets--;
    get_ap.write( t );
  endtask
  
  task peek( output dequantizador_output t );
    m.peek( t );

    get_ap.write( t );
  endtask
   
  function bit try_get( output dequantizador_output t );
    if( !m.try_get( t ) ) begin
      return 0;
    end

    get_ap.write( t );
    return 1;
  endfunction 
  
  function bit try_peek( output dequantizador_output t );
    if( !m.try_peek( t ) ) begin
      return 0;
    end
  
    get_ap.write( t );
    return 1;
  endfunction

  function bit try_put( input dequantizador_output t );
    if( !m.try_put( t ) ) begin
      return 0;
    end
  
    put_ap.write( t );
    return 1;
  endfunction  

  function bit can_put();
    return m_size == 0 || m.num() < m_size;
  endfunction  

  function bit can_get();
    return m.num() > 0 && m_pending_blocked_gets == 0;
  endfunction
  
  function bit can_peek();
    return m.num() > 0;
  endfunction

  function void flush();
    dequantizador_output t;
    bit r;

    r = 1; 
    while( r ) r = try_get( t ) ;
    
    if( m.num() > 0 && m_pending_blocked_gets != 0 ) begin
      ovm_report_error("flush failed" ,
		       "there are blocked gets preventing the flush");
    end
  
  endfunction
 
endclass
  

`endif

