  
//------------------------------------------------------------------------------
// Copyright 2006-07, Cadence Design Systems, Inc.
//
// Generated by 'svpp' pre-processor. DO NOT EDIT.
//
// File     : ovm_sequencer_ovm_sequence_item_ovm_sequence_item.svi
// Origin   : class 'ovm_sequencer' in file /usr/local/cds/ovm-2.0/src/methodology/sequences/ovm_sequencer.svh
//
// Specializations found at:
//------------------------------------------------------------------------------

`ifndef ovm_sequencer_ovm_sequence_item_ovm_sequence_item
`define ovm_sequencer_ovm_sequence_item_ovm_sequence_item

typedef class ovm_sequence_item;
typedef class ovm_sequence_item;

class ovm_sequencer_ovm_sequence_item_ovm_sequence_item extends ovm_sequencer_param_base_ovm_sequence_item_ovm_sequence_item;

  typedef ovm_sequencer_ovm_sequence_item_ovm_sequence_item this_type;
  bit     sequence_item_requested = 0;
  bit     get_next_item_called    = 0;

  // Ports
  ovm_seq_item_pull_imp_ovm_sequence_item_ovm_sequence_item_ovm_sequencer_ovm_sequence_item_ovm_sequence_item seq_item_export;
  ovm_seq_item_pull_imp_ovm_sequence_item_ovm_sequence_item_ovm_sequencer_ovm_sequence_item_ovm_sequence_item seq_item_cons_if;

  // Deprecated Members, do not use
  ovm_seq_prod_if seq_prod_if;
  ovm_seq_cons_if seq_cons_if[string];

  function new (string name, ovm_component parent);
    super.new(name, parent);

    seq_item_export         = new ("seq_item_export", this);
    seq_item_cons_if             = seq_item_export;
    $cast(seq_prod_if, create_component("ovm_seq_prod_if", "seq_prod_if"));
    seq_prod_if.print_enabled = 0;
  endfunction // new
  
  // return proper type name string
  virtual function string get_type_name();
    return "ovm_sequencer";
  endfunction 

  function void connect();
    super.connect();
  endfunction // void

  virtual function void build();
    super.build();
  endfunction // function
  
  // Counting the number of of connections is done at end of
  // elaboration and the start of run.  If the user neglects to
  // call super in one or the other, the sequencer will still
  // have the correct value

  protected virtual function int  m_find_number_driver_connections();
    ovm_port_component_base provided_to_port_list[string];
    ovm_port_component_base seq_port_base;
    
    // Check that the seq_item_pull_port is connected
    seq_port_base = seq_item_export.get_comp();
    seq_port_base.get_provided_to(provided_to_port_list);
    return(provided_to_port_list.num());
  endfunction

  ///////////////////////////////////////////////////
  //
  // Local functions
  //
  ///////////////////////////////////////////////////

  
  ///////////////////////////////////////////////////
  //
  // Methods available to Sequencers
  // 
  ///////////////////////////////////////////////////
  
  
  ///////////////////////////////////////////////////
  //
  // Methods available to Pull Drivers
  // 
  ///////////////////////////////////////////////////

  local task select_sequence();
    integer selected_sequence;

    // Select a sequence
    do begin
      wait_for_sequences();
      selected_sequence = choose_next_request();
      if (selected_sequence == -1) begin
        wait_for_available_sequence();
      end
    end while (selected_sequence == -1);
    // issue grant
    if (selected_sequence >= 0) begin
      set_arbitration_completed(arb_sequence_q[selected_sequence].request_id);
      arb_sequence_q.delete(selected_sequence);
      m_update_lists();
    end
  endtask // select_sequence

  task get_next_item(output ovm_sequence_item t);
    ovm_sequence_item     req_item;

    // If a sequence_item has already been requested, then get_next_item()
    // should not be called again until item_done() has been called.

    if (get_next_item_called == 1) begin
      ovm_report_error(get_full_name(), "Get_next_item called twice without item_done or get in between");
    end
    
    if (sequence_item_requested == 0) begin
      select_sequence();
    end

    // Set flag indicating that the item has been requested to ensure that item_done or get
    // is called between requests
    sequence_item_requested = 1;
    get_next_item_called = 1;
    m_req_fifo.peek(t);
  endtask // get_next_item

  task try_next_item(output ovm_sequence_item t);
    wait_for_sequences();
    if (has_do_available() == 0) begin
      t = null;
      return;
    end
    get_next_item(t);
  endtask // try_next_item

  function void item_done(ovm_sequence_item item = null);
    ovm_sequence_item t;

    // Set flag to allow next get_next_item or peek to get a new sequence_item
    sequence_item_requested = 0;
    get_next_item_called = 0;
    
    if (m_req_fifo.try_get(t) == 0) begin
      ovm_report_fatal(get_full_name(), "Item done reports empty request fifo");
    end else begin
      m_wait_for_item_sequence_id = t.get_sequence_id();
      m_wait_for_item_transaction_id = t.get_transaction_id();
    end
    
    if (item != null) begin
      seq_item_export.put_response(item);
    end

  // Missing item_done functionality

    // Grant any locks as soon as possible
    grant_queued_locks();
  endfunction // void

  virtual task put (ovm_sequence_item t);
    put_response(t);
  endtask // put

  task get(output ovm_sequence_item t);
    if (sequence_item_requested == 0) begin
      select_sequence();
    end
    sequence_item_requested = 1;
    m_req_fifo.peek(t);
    item_done();
  endtask // get

  task peek(output ovm_sequence_item t);

    if (sequence_item_requested == 0) begin
      select_sequence();
    end
    
    // Set flag indicating that the item has been requested to ensure that item_done or get
    // is called between requests
    sequence_item_requested = 1;
    m_req_fifo.peek(t);
  endtask // peek

  // Backwards Compatibility
  function void item_done_trigger(ovm_sequence_item item = null);
    item_done(item);
  endfunction

  function ovm_sequence_item item_done_get_trigger_data();
    return last_rsp(0);
  endfunction

  virtual function void add_seq_cons_if(string if_name);
    seq_cons_if[if_name] = null;
    $cast(seq_cons_if[if_name], create_component("ovm_seq_cons_if", 
      {"seq_cons_if[\"", if_name, "\"]"}));
    seq_cons_if[if_name].print_enabled = 0;
  endfunction  

endclass
  typedef ovm_sequencer_ovm_sequence_item_ovm_sequence_item ovm_sequencer;

`endif

